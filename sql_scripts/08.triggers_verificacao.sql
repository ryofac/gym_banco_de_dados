CREATE OR REPLACE FUNCTION verificar_cpf_duplicado() 
RETURNS TRIGGER AS $$
BEGIN
   -- Verificar se o CPF foi alterado
   IF (TG_OP = 'UPDATE' AND OLD.cpf <> NEW.cpf) OR (TG_OP = 'INSERT') THEN
      -- Verificar se o novo CPF j치 est치 cadastrado
      IF (SELECT COUNT(*) FROM cliente WHERE cpf = NEW.cpf) > 0 THEN
         RAISE EXCEPTION 'CPF j치 cadastrado no sistema!';
      END IF;
   END IF;
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_cpf_duplicado
BEFORE INSERT OR UPDATE ON cliente
FOR EACH ROW
EXECUTE FUNCTION verificar_cpf_duplicado();

CREATE TRIGGER trigger_cpf_duplicado
BEFORE INSERT OR UPDATE ON instrutor
FOR EACH ROW
EXECUTE FUNCTION verificar_cpf_duplicado();


CREATE OR REPLACE FUNCTION verificar_funcionario_inativo()
RETURNS TRIGGER AS $$
BEGIN
   IF (SELECT INATIVO FROM FUNCIONARIO WHERE NEW.ID_FUNCIONARIO = ID_FUNCIONARIO) IS TRUE THEN
      RAISE EXCEPTION 'Funcion치rio escolhido inativo!';
   END IF;
   RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER trg_funcionario_inativo
BEFORE INSERT OR UPDATE on MATRICULA
FOR EACH ROW
EXECUTE FUNCTION verificar_funcionario_inativo();

CREATE TRIGGER trg_funcionario_inativo
BEFORE INSERT OR UPDATE on VENDA
FOR EACH ROW
EXECUTE FUNCTION verificar_funcionario_inativo();


CREATE OR REPLACE FUNCTION VERIFICAR_CLIENTE_INATIVO()
RETURNS TRIGGER AS $$
BEGIN
   IF(SELECT INATIVO FROM CLIENTE WHERE NEW.ID_CLIENTE = ID_CLIENTE) IS TRUE THEN
      RAISE EXCEPTION 'Cliente escolhido inativo!';
   END IF;
   RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER trg_cliente_inativo
BEFORE INSERT OR UPDATE on MATRICULA
FOR EACH ROW
EXECUTE FUNCTION VERIFICAR_CLIENTE_INATIVO();


CREATE TRIGGER trg_cliente_inativo
BEFORE INSERT OR UPDATE on VENDA
FOR EACH ROW
EXECUTE FUNCTION VERIFICAR_CLIENTE_INATIVO();