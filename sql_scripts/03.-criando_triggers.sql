-- Trigger que decrementa a quantidade de um produto na tabela PRODUTO conforme for inserido em ITEM_VENDA
CREATE OR REPLACE FUNCTION decrementar_item_comprado()
RETURNS TRIGGER AS $$
DECLARE QNT_TOTAL_PRODUTO INT;
BEGIN
	SELECT qnt_em_estoque INTO QNT_TOTAL_PRODUTO from produto
	WHERE ID_PRODUTO = NEW.ID_PRODUTO;

  IF (QNT_TOTAL_PRODUTO < 10) 
  THEN RAISE INFO 'Produto de id % está acabando! % restantes', NEW.ID_PRODUTO, QNT_TOTAL_PRODUTO;
  END IF;

	IF (QNT_TOTAL_PRODUTO < NEW.QUANTIDADE) THEN
		RAISE EXCEPTION 'Quantidade em estoque (%) insuficiente', QNT_TOTAL_PRODUTO;
	END IF;

	UPDATE PRODUTO 
	SET qnt_em_estoque = qnt_em_estoque - NEW.QUANTIDADE
	WHERE id_produto = NEW.id_produto;
	RETURN NEW;

END;
$$
LANGUAGE PLPGSQL;

CREATE TRIGGER TRG_DECREMENTAR_ESTOQUE
AFTER INSERT ON ITEM_VENDA
FOR EACH ROW
EXECUTE FUNCTION decrementar_item_comprado();

-- Trigger que atualiza informações de uma venda quando uma linha for inserida na tabela ITEM_VENDA
CREATE OR REPLACE FUNCTION ATUALIZAR_INFORMACOES_DA_VENDA()
RETURNS TRIGGER AS $$
BEGIN
	UPDATE VENDA v SET QNT_PRODUTOS=QNT_PRODUTOS + NEW.QUANTIDADE, VALOR_TOTAL= VALOR_TOTAL + P.VALOR_UNITARIO
	FROM ITEM_VENDA IV JOIN PRODUTO P ON P.ID_PRODUTO = IV.ID_PRODUTO
	WHERE v.ID_VENDA = IV.ID_VENDA;
	RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TRG_ATUALIZAR_INFORMACOES_DA_VENDA
AFTER INSERT ON ITEM_VENDA
FOR EACH ROW 
EXECUTE FUNCTION ATUALIZAR_INFORMACOES_DA_VENDA();

CREATE OR REPLACE FUNCTION PREVENIR_ALTERACAO_COMPRA_FINALIZADA_CANCELADA()
RETURNS TRIGGER AS $$
BEGIN 
  IF (SELECT status FROM venda WHERE id_venda = NEW.id_venda) IN ('CONCLUIDA', 'CANCELADA') THEN
    RAISE EXCEPTION 'Não é possível alterar itens em uma venda já confirmada ou cancelada!';
  END IF;
 	RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;

CREATE TRIGGER TRG_PREVENIR_ALTERACAO_COMPRA_FINALIZADA_CANCELADA
BEFORE INSERT OR UPDATE ON item_venda
FOR EACH ROW
EXECUTE FUNCTION PREVENIR_ALTERACAO_COMPRA_FINALIZADA_CANCELADA();